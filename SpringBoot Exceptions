1. java.util.NoSuchElementException: No value present
       => Given Primary key is not found in the database.
       => Your requesting data is not available
       
2. org.springframework.expression.spel.SpelEvaluationException:=> code wrong in jpa repository native query  

3. Circular References Exception: => spring.main.allow-circular-references=true

4. org.springframework.dao.IncorrectResultSizeDataAccessException: 
       query did not return a unique result: 2; 
       nested exception is javax.persistence.NonUniqueResultException: query did not return a unique result: 2
       => your finding one row in database and return type is bean entity, but query returns more than one row then it's not able to assign result to the entity
              there is the problem.
5. java.lang.IllegalArgumentException: Can not set boolean field com.iti.entity.Iti.vtp to null value
       => your created a variable with data type boolean (Ex: private boolean pass;) but in the database null values are available for that column, 
       you need to change return type of the variable to Boolean (Ex: private Boolean pass;) then it's works fine
       => Reason: 
                => boolean is a primitive type, and can have a value of only true or false.
                => Whereas Boolean is a Wrapper Object and can be given a null value.
                => From Java 1.5 AutoBoxing is provided, so you can convert boolean to Boolean and back to boolean with Simple assignment operator (=), 
                        So you can do this in places where you want Boolean instead of boolean.

6. org.springframework.web.bind.MissingServletRequestParameterException: 
       Required request parameter 'requestno' for method parameter type String is not present
       => variable name in bean class and @RequestParam variable name should same (syntax also) while using repository findById method.
     
7. org.springframework.core.convert.ConverterNotFoundException: 
       No converter found capable of converting from type [org.springframework.data.jpa.repository.query.AbstractJpaQuery$TupleConverter$TupleBackedMap] 
       to type [com.thorben.janssen.spring.data.model.PlayerNameDto]
       => Ur return type of the repository method is writtern a class instead of entity class of the repository.
       => Solution is you need to create getter method for every parameter of the custom class variable which is your repository method returning class.
       => Ex: public interface Demo{ String getFirstName(); String getLastName();}
8. org.springframework.beans.factory.UnsatisfiedDependencyException: 
       => Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Unsatisfied dependency expressed through method 'dataSourceScriptDatabaseInitializer' parameter 0: Error creating bean with name 'dataSource' defined in class path resource [org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]: Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' threw exception with message: Failed to load driver class org.postgresql.Driver in either of HikariConfig class loader or Thread context classloader
9. java.lang.IllegalStateException: Neither BindingResult nor plain target object for bean name 'bean' available as request attribute
       => give modelattribute name while posting from form 
       => @RequestMapping(value="/userLogin", method = RequestMethod.POST)
	public String userLogin(@Valid @ModelAttribute("bean")  LoginModel bean,BindingResult bindingResult,Model model) {
		System.out.println("bean=>"+bean.toString());
		if (bindingResult.hasErrors()) {
			System.out.println("hasErros");
			return "public/Login";
		}
		
		return null;
	}

