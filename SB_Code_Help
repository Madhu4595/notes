SENDING USERNAME ALONG WITH SESSION IN SB SECURITY 2
=======================================================
@GetMapping({"/login"})
    public String menu3(Model model,HttpSession session){
		model.addAttribute("validUser", "validUser");
		Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
		String username=authentication.getName();
		model.addAttribute("userName", username);
		session.setAttribute("username",username);
		System.out.println("session values is"+session.getAttribute("username"));
        return "dashboard";
    }
    
STORE IMAGE AS BASE64 IN DB AND DISPLAY
=========================================
STORE
-------
front end page
--------------jsp
<form:form action="./itemReceivedSave" method="post" modelAttribute="itemReceived" enctype="multipart/form-data">
<input class="form-control" name="stock_doc" type="file">
</form:form>
Controller
-----------method
public String save(MultipartFile stock_doc){
  byte[] stock_docBytes = stock_doc.getBytes();
  String stock_docBytes64String = Base64.getEncoder().encodeToString(stock_docBytes);
  //setting to the saving bean
  itemReceived.setStock(stock_docBytes64String);
  //saving
  itemReceivedRepo.save(itemReceived);
}
DISPLAY
--------
<img src="data:image/png;base64,${orderdetails.pocopy}" alt="Image" width="40px;" height="40px;" />

CUSTOM ID GENERATION
====================
StringPrefixedSequenceIdGenerator.class
----------------------------------------
import java.io.Serializable;
import java.util.Properties;
import org.hibernate.HibernateException;
import org.hibernate.MappingException;
import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.hibernate.id.enhanced.SequenceStyleGenerator;
import org.hibernate.internal.util.config.ConfigurationHelper;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.type.LongType;
import org.hibernate.type.Type;

public class StringPrefixedSequenceIdGenerator extends SequenceStyleGenerator {
    public static final String VALUE_PREFIX_PARAMETER = "valuePrefix";
    public static final String VALUE_PREFIX_DEFAULT = "";
    private String valuePrefix;
 
    public static final String NUMBER_FORMAT_PARAMETER = "numberFormat";
    public static final String NUMBER_FORMAT_DEFAULT = "%d";
    private String numberFormat;
 
    @Override
    public Serializable generate(SharedSessionContractImplementor session,
            Object object) throws HibernateException {
        return valuePrefix + String.format(numberFormat, super.generate(session, object));
    }
 
    @Override
    public void configure(Type type, Properties params,
            ServiceRegistry serviceRegistry) throws MappingException {
        super.configure(LongType.INSTANCE, params, serviceRegistry);
        valuePrefix = ConfigurationHelper.getString(VALUE_PREFIX_PARAMETER,
                params, VALUE_PREFIX_DEFAULT);
        numberFormat = ConfigurationHelper.getString(NUMBER_FORMAT_PARAMETER,
                params, NUMBER_FORMAT_DEFAULT);
    }
}
Entity class
-------------
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "gpf_seq")
    @GenericGenerator(
        name = "gpf_seq", 
        strategy = "com.app.util.StringPrefixedSequenceIdGenerator", 
        parameters = {
            @Parameter(name = StringPrefixedSequenceIdGenerator.INCREMENT_PARAM, value = "1"),
            @Parameter(name = StringPrefixedSequenceIdGenerator.VALUE_PREFIX_PARAMETER, value = "GPF"),
            @Parameter(name = StringPrefixedSequenceIdGenerator.NUMBER_FORMAT_PARAMETER, value = "%04d") })
	private String requestNo;
	

