FOR FIND UNIQUE VALUES FROM STRING ARRAY
=========================================
List<String> list = Arrays.asList(strarray);
List<String> reqList = list.stream().distinct().collect(Collectors.toList());




=> Streams are using for process objects of the collection.

=> What is the Differences between java.util.streams and java.io.streams?
	=> java.util.streams meant for processing objects from the collection, it represents a stream of objects from the collection.
	=> java.io.streams are meant for processing binary and character data with respect to file.
	
=> What is the different between collection and stream?
	=> if we want to represent a group of individual objects as a single entity then We should go for collection.
	=> if we want to process a group of objects from the collection then we should go for streams.
	=> We can create a stream object to the collection by using stream() method of collection interface.
	=> stream() method is a default method added to the Collection in 1.8 version. default Stream stream()
	=> Ex. Stream s = c.stream();
	
=> Stream is an interface present in java.util.stream.
=> Once we got the stream, by using that we can process objects of that collection.
=> We can process the objects in the following 2 phases

1. Configuration: 
	=> We can configure either by using filter mechanism or by using map machanism.
	a. Filtering
		=> We can configure a filter to filter elements from the collection based on some boolean condition by using filter() method of stream interface.
			=> public Stream  filter(Predicate<T> t)
		=> here (Predicate<T> t) can be a boolean valued function/lambda expression.
		=> Ex: 	Stream s = c.stream()
			Stream s1 = s.filter(i -> i%2==0);
		=> Hence to filter elements of collection based on some Boolean condition we should go for filter() method.
		a.1 Mapping
		=> If we want to create a separate new object, for every object present in the collection based on our requirement then we should go for map() method
		   of stream interface.
		=> public Stream map(Function f); -> (Function f) it can be lambda expression also
		=> Ex:
			Stream s = c.stream(); 
			Stream s1 = s.map(i -> i+10);
		=> Once we performed configuration we can process bojects by using several methods.
	b. Processing
		=> b.1 processing by collect() method
			=> This method collects the elements from the stream and adding to the specified to the collection indicated (specified ) by argument.
			=> Example: To collect only even numbers from the arraylist.
				ArrayList<Integer> list = new ArrayList<String>();
				for(int i=0; i<10;i++){
					list.add(i);
				}
				List<Integer> intList = list.stream().filter(i -> i%2 == 0).collect(Collectors.toList());
		=> b.2 processing by count() method 
		=> b.3 processing by sort() method
		=> b.4 processing by min() and max() method
		=> b.5 forEach() method
		=> b.6 toArray() method
		=> b.7 Stream.of() method


String input = "thanksyousomuch";
		
		String stringArray = Arrays.toString(input.split(""));
		//output: [t, h, a, n, k, s, y, o, u, s, o, m, u, c, h]
		
		Map<Object, List<String>> mapobject = Arrays.stream(input.split("")).collect(Collectors.groupingBy(s->s));  
		//output: {a=[a], c=[c], s=[s, s], t=[t], u=[u, u], h=[h, h], y=[y], k=[k], m=[m], n=[n], o=[o, o]}
		
		Map<String, Long> mapObject = Arrays.stream(input.split("")).collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
		//output: {a=1, c=1, s=2, t=1, u=2, h=2, y=1, k=1, m=1, n=1, o=2}
		
		//Java Program to find all duplicate elements
		List<String> listStr = Arrays.stream(input.split("")).collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))
		.entrySet().stream().filter(x-> x.getValue()>1).map(Map.Entry::getKey).collect(Collectors.toList());
		//output: [s, u, h, o]
		
		// Java Program to find all unique values
		List<String> listStr2= Arrays.stream(input.split("")).collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))
		.entrySet().stream().filter(x-> x.getValue() == 1).map(Map.Entry::getKey).collect(Collectors.toList());  
		//output: [a, c, t, y, k, m, n]
		
		
		//Java Program to find first non-repeat element
		String firstEle = Arrays.stream(input.split("")).collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting()))
		.entrySet().stream().filter(x -> x.getValue() == 1).findFirst().get().getKey(); 
		//output: t
		
		
		//Java Program to find first repeat element
		String firstElem = Arrays.stream(input.split("")).collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting()))
		.entrySet().stream().filter(x -> x.getValue() > 1).findFirst().get().getKey(); 
		//output: h
		
		
		//Java Program to find second highest number from given array
		int[] numbers = {5,9,11,2,8,21,1};
		
		//help: sorting in ascending order
		List<Integer> integerList = Arrays.stream(numbers).boxed().sorted().collect(Collectors.toList());
		//output: [1, 2, 5, 8, 9, 11, 21]
		
		//help: sorting in descending order
		List<Integer> integerList2 = Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
		//output: [21, 11, 9, 8, 5, 2, 1]
		
		//skipping first element after removing first element
		List<Integer> integerList3 = Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).skip(1).collect(Collectors.toList());
		//output: [11, 9, 8, 5, 2, 1]
		
		Integer firstElement = Arrays.stream(numbers).boxed().sorted(Comparator.reverseOrder()).skip(1).findFirst().get();
		//output: 11
		
		//For find Second Least Number
		Integer leastSecond = Arrays.stream(numbers).boxed().sorted().skip(1).findFirst().get();
		//output: 2
		
		//Longest String from given array
		String[] langs = {"java", "css", "html", "springboot", "microservice"};
		String longestStr = Arrays.stream(langs).reduce((word1,word2)-> word1.length()>word2.length()?word1:word2).get();
		//output: microservice
		
		//Find All Elements from array who starts with 1
		int[] numbers2 = {5,9,11,2,8,21,1,29};
		
		//help: converting into string array
		List<String> stringarray = Arrays.stream(numbers2).boxed().map(s -> s +"").collect(Collectors.toList());
		//output: [5, 9, 11, 2, 8, 21, 1, 29]
		
		List<String> stringarray2 = Arrays.stream(numbers2).boxed().map(s -> s +"").filter(s -> s.startsWith("1")).collect(Collectors.toList());
		//output: [11, 1]
		
		//Skip & limit method use case based example
		IntStream.range(1, 10).skip(1).limit(8).forEach(System.out::print);
		//output: 23456789
